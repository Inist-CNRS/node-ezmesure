#!/usr/bin/env node
'use strict';
/*eslint no-console: 0, no-sync: 0 */
/**
 * Command used to enrich csv source with meta info from a doi identifi
 *
 */
const fs = require('fs');
const ezmesure = require('../index.js');
const yargs   = require('yargs')
  .usage('Send commands to ezMESURE' +
    '\n  Usage: $0 <indexList|indexInsert|indexDelete|indexBulk> [<args>]')
  .alias('url', 'u')
  .describe('url', 'ezMESURE URL API, like https://ezmesure-preprod.couperin.org')
  .alias('token', 't')
  .describe('token', 'JWT token needed for authentication')
  .alias('index', 'i')
  .describe('index', 'index concerned by the command, like univ-test')
  .alias('ezpaarseFile', 'f')
  .describe('ezpaarseFile', 'a csv file to insert. Have to be an ezPAARSE output.')
  .alias('transactionsFile', 't')
  .describe('transactionsFile', 'a JSON file containing transactions to send to ezMESURE');
let argv = yargs.argv;


// show usage if --help option is used
if (argv.help || argv.h) {
  yargs.showHelp();
  process.exit(0);
}

let transactions  = [];
let nbtr = 0;
let command = argv._[0];

let baseUrl = ezmesure.config.baseUrl;
ezmesure.authentication(ezmesure.config.token);

// console.log(argv);

if (!command) {
  yargs.showHelp();
  console.error('Needs command');
  process.exit(1);
} else if (command === 'indexBulk') {
  // bulk transactions in a JSON file
  //console.error(`Command ${command} not implemented`);
  if ( !argv.transactionsFile ) {
    console.error('indexBulk needs transactionsFile parameter');
    process.exit(1);
  }
  transactions = JSON.parse(fs.readFileSync(argv.transactionsFile));
} else {
  // only one transaction via command parameter
  transactions.push({command: command, baseUrl: argv.baseUrl, token: argv.token, index: argv.index, ezpaarseFile: argv.ezpaarseFile});
}

function reports() {
  console.log(`Transactions : ${nbtr}`);
}

action(reports);

function action(callback) {
  let transaction = transactions.shift();

  if (!transaction) return callback();
  nbtr++;
  if (!transaction.command) {
    yargs.showHelp();
    console.error('Needs command');
    process.exit(1);
  }

  if (transaction.baseUrl && transaction.token) {
    // override default authentication if found in transaction
    ezmesure.options.headers = {'Authorization': `Bearer ${transaction.token}`};
    baseUrl = transaction.baseUrl;
  } else {
    baseUrl = ezmesure.config.baseUrl;
  }

  switch(transaction.command) {
  case 'indexList' :
    ezmesure.indexList({baseUrl: baseUrl}, (err, list) => {
      if (err && err.statusCode === 401) {
        console.error('Check your token');
        process.exit(1);
      }
      console.log(ezmesure.getEzMesureIndex(list));
      action(callback);
    });
    break;
  case 'indexInsert' :
      // check parameters
    if ( !transaction.ezpaarseFile ) {
      console.error('indexInsert needs ezpaarseFile parameter');
      process.exit(1);
    }
    if ( !transaction.index) {
      console.error('indexInsert needs index parameter');
      process.exit(1);
    }

    ezmesure.indexInsert({baseUrl: baseUrl, index: transaction.index, file: transaction.ezpaarseFile}, (err, list) => {
      if (err && err.statusCode === 401) {
        console.error('Check your token');
        process.exit(1);
      }
      console.log(list);
      action(callback);
    });
    break;
  case 'indexDelete' :
      // check parameters
    if (!transaction.index) {
      console.error('indexDelete needs index parameter');
      process.exit(1);
    }

    ezmesure.indexDelete({baseUrl: baseUrl, index: transaction.index}, (err, list) => {
      if (err && err.statusCode === 401) {
        console.error('Check your token');
        process.exit(1);
      }
      console.log(list);
      action(callback);
    });
    break;
  default :
    console.error(`Command ${transaction.command} not implemented`);
    action(callback);
    break;
  }
}